class Tree:
    """Abstract base class representing a tree structure."""

    #------------------------------- nested Position class -------------------------------
    class Position:
        """An abstraction representing the location of a single element."""

        def element(self):
            """Return the element stored at this Position."""
            raise NotImplementedError('must be implemented by subclass')

        def __eq__(self, other):
            """Return True if other Position represents the same location."""
            raise NotImplementedError('must be implemented by subclass')

        def __ne__(self, other):
            """Return True if other does not represent the same location."""
            return not (self == other) # opposite of eq

    # ---------- abstract methods that concrete subclass must support ----------
    def root(self):
        """Return Position representing the tree s root (or None if empty)."""
        raise NotImplementedError('must be implemented by subclass')

    def parent(self, p):
        """Return Position representing p s parent (or None if p is root)."""
        raise NotImplementedError('must be implemented by subclass')

    def num_children(self, p):
        """Return the number of children that Position p has."""
        raise NotImplementedError('must be implemented by subclass')

    def children(self, p):
        """Generate an iteration of Positions representing p s children."""
        raise NotImplementedError('must be implemented by subclass')

    def __len__(self):
        """Return the total number of elements in the tree."""
        raise NotImplementedError('must be implemented by subclass')
    # ---------- concrete methods implemented in this class ----------
    def is_root(self, p):
        """Return True if Position p represents the root of the tree."""
        return self.root( ) == p

    def is_leaf(self, p):
        """Return True if Position p does not have any children."""
        return self.num_children(p) == 0

    def is_empty(self):
        """Return True if the tree is empty."""
        return len(self) == 0
    
    def depth(self, p):
        """Return the number of levels separating Position p from the root."""
        if self.is_root(p):
            return 0
        else:
            return 1 + self.depth(self.parent(p))

    def _height2(self, p): # time is linear in size of subtree
        """Return the height of the subtree rooted at Position p."""
        if self.is_leaf(p):
            return 0
        else:
            return 1 + max(self._height2(c) for c in self.children(p))

    def height(self, p=None):
        """ Return the height of the subtree rooted at Position p.
            If p is None, return the height of the entire tree.
        """
        if p is None:
            p = self.root()
        return self._height2(p) # start height2 recursion
        
class LinkedTree(Tree):

    class _Node: # A private class for storing nodes
        __slots__ = '_element', '_parent', '_children'
        
        def __init__(self, element, parent=None, children=None):
            self._element = element
            self._parent = parent
            self._children = children
            
    class Position(Tree.Position):
        
        def __init__(self, container, node):
            """Constructor should not be invoked by user."""
            self._container = container
            self._node = node

        def element(self):
            """Return the element stored at this Position."""
            return self._node._element

        def __eq__(self, other):
            """Return True if other is a Position representing the same location."""
            return type(other) is type(self) and other._node is self._node
        
    def _validate(self, p):
        """Return associated node, if position is valid."""
        if not isinstance(p, self.Position):
            raise TypeError('p must be proper Position type')
        if p._container is not self:
            raise ValueError('p does not belong to this container')
        if p._node._parent is p._node: # convention for deprecated nodes
            raise ValueError('p is no longer valid')
        return p._node

    def _make_position(self, node):
        """Return Position instance for given node (or None if no node)."""
        return self.Position(self, node) if node is not None else None
        
    def __init__(self):
        self._root = None
        self._size = 0
        
    def __len__(self):
        return self._size
        
    def root(self):
        return self._make_position(self._root)
        
    def parent(self, p):
        node = self._validate(p)
        return self._make_position(node._parent)
        
    def num_children(self, p):
        node = self._validate(p)
        if node._children is None:
            return 0
        else:
            return len(node._children)
        
    def children(self, p):
        node = self._validate(p)
        if node is not None and node._children is not None:
            for child in node._children:
                yield self._make_position(child)
        
    def _add_root(self, e):
        if self._root is not None: raise ValueError('Root exists')
        self._size = 1
        self._root = self._Node(e)
        return self._make_position(self._root)
        
    def _add_nonroot_node(self, p, e):
        node = self._validate(p)
        if node is None: raise ValueError('No such position exists')
        if node._children is None:
            node._children = []
        self._size+=1
        newnode=self._Node(e,node) 
        elements=[]
        for x in node._children:       
            elements.append(x._element)
        if e not in elements:
            node._children.append(newnode)
        # TODO: Need to make sure that there is no child with the same value.
        # TODO Do not forget to update the _size.
        # TODO: Create a new node with the value.
        # TODO. Add it to the children list of node p.
        return self._make_position(newnode)
        
    def add_node(self, e, p=None):
        if p==None:
            self._add_root(e)
        else:
            self._add_nonroot_node(p, e)
        """Add new node to tree. Provide no position to add as root."""   
    def _traverse_preorder(self,p):
        yield p
        for c in self.children(p):
            for other in self._traverse_preorder(c):
                yield other
            
            
        """Returns a generator that yields nodes in pre-order"""

    def _traverse_postorder(self,p):
        """Returns a generator that yields nodes in post-order"""     
        for c in self.children(p):
            for other in self._traverse_postorder(c):
                yield other
        yield p        
        
    def all_nodes(self, mode):
        g = None
        if mode == 'pre':
            g = self._traverse_preorder()
        else:
            g = self._traverse_postorder()
        for n in g:
            yield n
        
    def get_path_to_root(self, p):
        """returns an ordered list of positions from p to root (including p and root) """
        node=self._validate(p)
        path=[]
        while node._element!=self.root.element():
            path.append(self._make_position(node))
            node=self.parent(node)
        path.append(self._tree.root())
        return path    
    
    def find_child_by_value(self, p, value):
        node=self._validate(p)
        for child in node._children:
            if child._element==value:
                return self._make_position(child)
        """Returns the position of the child of p with value """
        
class ProductCategorizer:
    
    def __init__(self, data_file_path):
        self._data_file_path = data_file_path
        self._tree = None        
    def fill_tree(self):
        """Read the categoric data from input file line by line and blow up the tree"""
        self._tree = LinkedTree()
        file=open(self._data_file_path)
        liste=[[x for x in line.rstrip("\n").split(",")]for line in file.readlines()]
        self._tree.add_node(liste[0][0])
        for x in range (len(liste)-1):
           if liste[x][-1] not in liste[x+1]:
             path= liste[x]            
             self._tree._add_nonroot_node(self._tree.root(),path[1])
             posit=self._tree.find_child_by_value(self._tree.root(),path[1])
             if len(path)>2:
                 for y in range (1,len(path)-1):                      
                        self._tree._add_nonroot_node(posit,path[y+1])
                        posit=self._tree.find_child_by_value(posit,path[y+1])
             if x==len(liste)-2:
                 path=liste[-1]
                 self._tree._add_nonroot_node(self._tree.root(),path[1])
                 posit=self._tree.find_child_by_value(self._tree.root(),path[1])
                 if len(path)>2:
                    for y in range (1,len(path)-1):                      
                        self._tree._add_nonroot_node(posit,path[y+1])
                        posit=self._tree.find_child_by_value(posit,path[y+1])                        
    def print_tree(self):
        pretext=open("pre-order_tre3e.txt","x") 
        posttext=open("post-order_tre3e.txt","x")
        for p in self._tree._traverse_preorder(self._tree.root()):
            y=str(3 * self._tree.depth(p) * ' ' + str(p.element()))
            pretext.write(y +"\n")
        for p in self._tree._traverse_postorder(self._tree.root()):
             y=str(3 * self._tree.depth(p) * ' ' + str(p.element()))
             posttext.write(y+"\n")
        pretext.close()
        posttext.close()
